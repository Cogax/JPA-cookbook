<?xml version="1.0" encoding="UTF-8" ?>
<persistence version="2.1" 
     xmlns="http://xmlns.jcp.org/xml/ns/persistence" 
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
     xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
     http://www.oracle.com/webfolder/technetwork/jsc/xml/ns/persistence/persistence_2_1.xsd">

     <persistence-unit name="testDB" transaction-type="RESOURCE_LOCAL">

          <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

          <!-- Die Registrierung aller Klassen ist in Verbindung mit einem JEE Container nicht zwingen
               Werden mehr als eine Persistence-Unit verwendet, so ist die Registrierung zu empfehlen
               Wird JPA im Java SE Umfeld verwendet, so ist die Registrierung zwingend -->
          <class>ch.cogax.jpacookbook.Person</class>

          <!-- shouldn't be valid for java SE per specification, but it works for EclipseLink ... -->
          <!-- <exclude-unlisted-classes>false</exclude-unlisted-classes> -->

          <properties>
               <!-- JPA connection information for the database -->
               <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.EmbeddedDriver" /> <!-- Embedded-Driver -->
               <!-- <property name="javax.persistence.jdbc.url" value="jdbc:derby:testDB;create=true" />  Embedded Database -->
               <property name="javax.persistence.jdbc.url" value="jdbc:derby:memory:testDB;create=true" /> <!-- In-Memory -->
               <!-- Access for the default Derby-Database -->
               <!-- <property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.ClientDriver" /> --><!-- Client-Driver --> 
               <!-- <property name="javax.persistence.jdbc.url" value="jdbc:derby://localhost:1527/sun-appserv-samples;create=true" /> -->
               <!-- User and Password (Database-Schema) -->
               <property name="javax.persistence.jdbc.user" value="" />
               <property name="javax.persistence.jdbc.password" value="" />
               
               <!-- Specifies the action to be taken by the persistence provider with regard to the database artifacts -->
               <!-- Valid values for this property: none, create, drop-and-create, drop -->
               <property name="javax.persistence.schema-generation.database.action" value="drop-and-create" />


               <!-- Specifies whether the persistence provider is to create the database schema(s) in addition to creating
                    database objects such as tables, sequences, constraints, etc. -->
               <property name="javax.persistence.schema-generation.create-database-schemas" value="true" />
               
               <!-- Specifies which scripts are to be generated by the persistence provider -->
               <!-- Valid values for this property: none, create, drop-and-create, drop -->
               <property name="javax.persistence.schema-generation.scripts.action" value="none" />
               <!-- If scripts are to be generated, controls target locations for writing of scripts. Writers are pre-configured
                    for the persistence provider. Need to be specified only if scripts are to be generated. -->
               <!-- 
               <property name="javax.persistence.schema-generation.scripts.drop-target" value="META-INF/drop.sql" />
               <property name="javax.persistence.schema-generation.scripts.create-target" value="META-INF/create.sql" />
              	-->
              
               <!-- Specifies whether the creation of database artifacts is to occur on the basis of the object/relational
                    mapping metadata, DDL script, or a combination of the two. -->
               <!-- Valid values for this property: metadata, script, metadata-then-script, script-then-metadata -->
               <property name="javax.persistence.schema-generation.create-source" value="metadata" />
               <!-- Specifies whether the dropping of database artifacts is to occur on the basis of the object/relational
                    mapping metadata, DDL script, or a combination of the two. -->
               <!-- Valid values for this property: metadata, script, metadata-then-script, script-then-metadata -->
               <property name="javax.persistence.schema-generation.drop-source" value="metadata" />

               <!-- Specifies a java.IO.Reader configured for reading of the SQL script or a string designating a file URL for
                    the SQL script to create or delete database artifacts. -->
               <!-- 
               <property name="javax.persistence.schema-generation.create-script-source" value="META-INF/create.sql"/>
               <property name="javax.persistence.schema-generation.drop-script-source" value="META-INF/drop.sql"/>
                -->
               
               <!-- Specifies a java.IO.Reader configured for reading of the SQL load script for database initialization or a
                    string designating a file URL for the script. -->
               <!-- <property name="javax.persistence.sql-load-script-source" value="META-INF/load.sql" />  -->
               
               
               <!-- 
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  Ab hier folgen EclipseLink spezifische Properties für die Persistence-Unit
                  Doku dazu siehe http://www.eclipse.org/eclipselink/api/2.5/index.html?org/eclipse/persistence/config/PersistenceUnitProperties.html
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                -->
               <!-- The database platform is auto-detected by default, if you want to set a specific platform this can be set.
                    This specifies the target database. For Oracle database, specify<property name="eclipselink.target-database"
                    value="Oracle"/>
                    A value of AUTO specifies that EclipseLink determine the target database from the JDBC metadata obtained
                    by accessing the database.
                    Applies to JDBC drivers that support the the database metadata. -->
               <!-- see http://www.eclipse.org/eclipselink/api/2.5/index.html?org/eclipse/persistence/config/TargetDatabase.html -->
               <property name="eclipselink.target-database" value="Derby" />

               <!-- This specifies if generation of database-platform-specific SQL should be enabled -->
               <property name="eclipselink.jdbc.native-sql" value="true" />

               <!-- How To Configure Logging: https://wiki.eclipse.org/EclipseLink/Examples/JPA/Logging -->
               <!--
                    This specifies the type of logger to use. The following values may be specified:
                    DefaultLogger (default)
                    JavaLogger
                    ServerLogger Most Java EE application servers have their own logging. To integrate with an application servers logging set the logger type to
                    ServerLogger
                    class name of custom logger
               -->
               <property name="eclipselink.logging.logger﻿﻿" value="JavaLogger" />
               <!--
                    This specifies the logging level. The following values may be specified. The following are some of the values used:
                    OFF: This disables logging. It is recommended for production.
                    SEVERE: This logs exceptions of level severe and terminates EclipseLink. It includes a stack trace.
                    WARNING: This logs exceptions of type warning and does not terminate EclipseLink. It does not include a stack trace.
                    INFO: This logs the info about login/logout. (default)
                    CONFIG: This level enables logging of such configuration details as your database login information and some metadata information. You may want
                    to use the CONFIG log level at deployment time.
                    FINE: This level enables logging of the first level of the debugging information and SQL. You may want to use this log level during debugging
                    and testing, but not at production.
                    FINER: This level enables logging of more debugging information than the FINE setting. For example, the transaction information is logged at
                    this level. You may want to use this log level during debugging and testing, but not at production.
                    FINEST: This level enables logging of more debugging information than the FINER setting, such as a very detailed information about certain features
                    (for example, sequencing). You may want to use this log level during debugging and testing, but not at production.
                    ALL: This level currently logs at the same level as FINEST.
               -->
               <property name="eclipselink.logging.level" value="FINE" />
               <property name="eclipselink.logging.level.sql" value="FINE" />
               <!-- The logging of SQL parameters can be enabled, or disabled through the following properties -->
               <property name="eclipselink.logging.parameters" value="true" />
               <!-- Print Timestamp — you can set it in the persistence.xml file (see the following example) to determine when a log output was printed. 
                    The default value for this setting is true -->
               <property name="eclipselink.logging.timestamp" value="true" />
               <!-- Print Thread — you can set it in the persistence.xml file (see the following example) when you are running multithreaded applications 
                    to print the hashcode of the thread, which wrote the message. 
                    The default value for this setting is false -->
               <property name="eclipselink.logging.thread" value="false" />
               <!-- Print Session — you can set it in the persistence.xml file (see the following example) to determine on which underlying session (if any) the message was sent. 
                    This setting is applicable to messages that require a database connection such as SQL, and the transaction information. 
                    The default value for this setting is true -->
               <property name="eclipselink.logging.session" value="false" />
               <!-- Print Exceptions — you can set it in the persistence.xml file (see the following example) to enable logging of 
                    the exceptions's messages at the time when these exceptions are thrown. 
                    The default value for this setting is true -->
               <property name="eclipselink.logging.exceptions" value="false" />

          </properties>
     </persistence-unit>
</persistence>